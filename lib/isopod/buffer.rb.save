class Isopod::IO

  class Buffer 
    TOKEN_WHITESPACE=[0x00, 0x09, 0x0A, 0x0C, 0x0D, 0x20]

    # some strings for comparissons. Declaring them here avoids creating new
    # strings that need GC over and over
    LEFT_PAREN = "("
    LESS_THAN = "<"
    STREAM = "stream"
    ID = "ID"
    FWD_SLASH = "/"

    attr_reader :pos, :tokens

    def initialize(io)
      @io = io
      @pos = @io.pos
      @tokens = []
    end

    def token(peek=false)
      tok = ""
      # read until tne next whitespace solidus or eol marker
      @pos = @io.pos if peek
      while !TOKEN_WHITESPACE.include?(byte = @io.getbyte)
        tok << byte
      end
      @io.seek @pos, IO::SEEK_SET if peek
      tok
    end

    def prime(count)
      # consume count number of tokens
      count.times do |i|
        @tokens << token
      end
      @tokens
    end

    def clear
      @buffer.clear
    end

    def read(bytes)
      @io.read(bytes)
    end    

  end

end
